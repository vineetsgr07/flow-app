{"version":3,"sources":["../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","components/Card/card.tsx","components/Card/index.tsx","container/node.tsx"],"names":["_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","Card","item","name","status","content","id","handler","deleteCard","route","console","log","onClick","className","Cards","items","map","NodeOperation","shuffle","deleteHandler","addNote","saveHandler","nodeName","value","connect","state","tasks","node","dispatch","shuffleHandler","actions","addNoteHandler","changeStatus","onChangeTaskContent","changeTaskTitle","deleteNode","save","editTitle","editContent"],"mappings":"iKACe,SAASA,EAAyBC,EAAQC,GACvD,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IACIE,EAAKC,EADLC,ECHS,SAAuCJ,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIE,EAAKC,EAFLC,EAAS,GACTC,EAAaC,OAAOC,KAAKP,GAG7B,IAAKG,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IACjCD,EAAMG,EAAWF,GACbF,EAASQ,QAAQP,IAAQ,IAC7BE,EAAOF,GAAOF,EAAOE,IAGvB,OAAOE,EDTM,CAA6BJ,EAAQC,GAGlD,GAAIK,OAAOI,sBAAuB,CAChC,IAAIC,EAAmBL,OAAOI,sBAAsBV,GAEpD,IAAKG,EAAI,EAAGA,EAAIQ,EAAiBH,OAAQL,IACvCD,EAAMS,EAAiBR,GACnBF,EAASQ,QAAQP,IAAQ,GACxBI,OAAOM,UAAUC,qBAAqBC,KAAKd,EAAQE,KACxDE,EAAOF,GAAOF,EAAOE,IAIzB,OAAOE,E,oBEaMW,G,MApBF,SAAC,GAAoF,IAAD,IAAjFC,KAAQC,EAAyE,EAAzEA,KAAMC,EAAmE,EAAnEA,OAAQC,EAA2D,EAA3DA,QAASC,EAAkD,EAAlDA,GAAkD,IAA5CC,QAAWC,EAAiC,EAAjCA,WAAYC,EAAqB,EAArBA,MAGxE,OADAC,QAAQC,IAAI,KAAML,GACX,oCACH,yBAAKM,QAAS,WAEV,OADAF,QAAQC,IAAI,MACLF,EAAMH,IAEfO,UAAU,QACR,4BAAQD,QAAS,WACb,OAAOJ,EAAWF,KADtB,YAICH,EACAC,EACAC,MCCES,IAfD,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,MAAUR,EAA2B,eAElD,OAAO,oCACH,yBAAKM,UAAU,YAEPE,GAASA,EAAMC,KAAI,SAACd,GAChB,OAAO,kBAAC,EAAD,eAAMA,KAAMA,GAAWK,W,gCCjBlD,0DAoCMU,EAAgB,SAAC,GAAqE,IAAnEC,EAAkE,EAAlEA,QAASC,EAAyD,EAAzDA,cAAeC,EAA0C,EAA1CA,QAASC,EAAiC,EAAjCA,YAAaC,EAAoB,EAApBA,SAEnE,OAAO,oCACH,yBAAKT,UAAU,YACX,iCAAM,2BAAOU,MAAOD,IAApB,KACA,4BAAQV,QAAS,kBAAMM,IAAvB,WACA,4BAAQN,QAAS,kBAAMO,IAAvB,UACA,4BAAQP,QAAS,kBAAMQ,IAAvB,YACA,4BAAQR,QAAS,kBAAMS,IAAvB,WAmBGG,uBAdS,SAACC,GAAD,MAAiB,CACrCC,MAAOD,EAAME,KAAKD,UAGK,SAACE,GAAD,MAAoB,CAC3CC,eAAgB,kBAAMD,EAASE,QAC/BX,cAAe,kBAAMS,EAASE,MAC9BC,eAAgB,kBAAMH,EAASE,MAC/BT,YAAa,kBAAMO,EAASE,MAC5BE,aAAc,kBAAMJ,EAASE,MAC7BG,oBAAqB,kBAAML,EAASE,MACpCI,gBAAiB,kBAAMN,EAASE,SAGrBN,EA9CF,SAAC,GAAsI,IAApIK,EAAmI,EAAnIA,eAAgBV,EAAmH,EAAnHA,cAAeY,EAAoG,EAApGA,eAAgBV,EAAoF,EAApFA,YAAaK,EAAuE,EAAvEA,MAAOM,EAAgE,EAAhEA,aAAcC,EAAkD,EAAlDA,oBAAqBC,EAA6B,EAA7BA,gBAClH,OAAO,6BACH,kBAACjB,EAAD,CACIC,QAASW,EACTM,WAAYhB,EACZC,QAASW,EACTK,KAAMf,IAEV,kBAAC,IAAD,CACIN,MAAOW,EACPnB,QAAS,CACLH,OAAQ,SAACE,GAAD,OAAgB0B,EAAa1B,IACrC+B,UAAW,SAAC/B,GAAD,OAAgB4B,EAAgB5B,IAC3CgC,YAAa,SAAChC,GAAD,OAAgB2B,EAAoB3B","file":"static/js/3.2ef5cd0b.chunk.js","sourcesContent":["import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","\nimport React from \"react\";\nimport { workFlowDetails } from \"../../type\";\n\ninterface cardP {\n    item: workFlowDetails\n    // deleteItem: (id: string) => void\n    handler: any\n}\n\nconst Card = ({ item: { name, status, content, id }, handler: { deleteCard, route } }: cardP) => {\n\n    console.log(\"id\", id)\n    return <>\n        <div onClick={() => {\n            console.log(\"id\")\n            return route(id)\n        }\n        } className=\"card\">\n            <button onClick={() => {\n                return deleteCard(id)\n            }\n            }> Delete </button>\n            {name}\n            {status}\n            {content}\n        </div>\n    </>\n}\n\nexport default Card;\n\n","import React from \"react\";\nimport './style.css';\nimport Card from \"./card\";\nimport { workFlowDetails } from \"../../type\";\n\n\nexport interface CardContent {\n    items: Array<workFlowDetails>\n    handler: any\n}\n\nconst Cards = ({ items, ...handler }: CardContent) => {\n\n    return <>\n        <div className=\"flex-row\">\n            {\n                items && items.map((item: workFlowDetails) => {\n                    return <Card item={item} { ...handler } />\n                })\n            }\n        </div>\n    </>\n}\n\n// deleteItem={(id: any) => deleteItems(id)} \n\nexport default Cards;","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport './style.css';\nimport Cards from \"../components/Card\";\nimport * as actions from \"../action/node.action\";\n\ninterface NodeT {\n    shuffleHandler: () => void\n    deleteHandler: () => void\n    addNoteHandler: () => void\n    saveHandler: () => void\n    changeStatus: (id: number) => void\n    onChangeTaskContent: (string: any) => void\n    changeTaskTitle: (string: any) => void\n    tasks: any\n}\n\nconst Node = ({ shuffleHandler, deleteHandler, addNoteHandler, saveHandler, tasks, changeStatus, onChangeTaskContent, changeTaskTitle }: NodeT) => {\n    return <div>\n        <NodeOperation\n            shuffle={shuffleHandler}\n            deleteNode={deleteHandler}\n            addNote={addNoteHandler}\n            save={saveHandler}\n        />\n        <Cards\n            items={tasks}\n            handler={{\n                status: (id: number) => changeStatus(id),\n                editTitle: (id: string) => changeTaskTitle(id),\n                editContent: (id: string) => onChangeTaskContent(id)\n            }}\n        />\n    </div>\n}\n\nconst NodeOperation = ({ shuffle, deleteHandler, addNote, saveHandler, nodeName }: any) => {\n\n    return <>\n        <div className=\"flex-row\">\n            <div> <input value={nodeName} /> </div>\n            <button onClick={() => shuffle}>Shuffle</button>\n            <button onClick={() => deleteHandler}>Delete</button>\n            <button onClick={() => addNote}>Add Note</button>\n            <button onClick={() => saveHandler}>Save</button>\n        </div>\n    </>\n}\n\nconst mapStateToProps = (state: any) => ({\n    tasks: state.node.tasks\n})\n\nconst mapDispatchToProps = (dispatch: any) => ({\n    shuffleHandler: () => dispatch(actions.shuffleNode()),\n    deleteHandler: () => dispatch(actions.deleteNode),\n    addNoteHandler: () => dispatch(actions.addNote),\n    saveHandler: () => dispatch(actions.saveNode),\n    changeStatus: () => dispatch(actions.changeNodeStatus),\n    onChangeTaskContent: () => dispatch(actions.editNodeContent),\n    changeTaskTitle: () => dispatch(actions.editNodeTitle)\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Node)"],"sourceRoot":""}