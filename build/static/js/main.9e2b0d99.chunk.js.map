{"version":3,"sources":["components/Toaster/index.tsx","action/actionsCreators.tsx","App.tsx","serviceWorker.ts","reducer/workflow.reducer.tsx","reducer/node.reducer.tsx","reducer/index.tsx","reducer/configureStore.tsx","index.tsx"],"names":["Toastr","timeOut","newestOnTop","preventDuplicates","position","transitionIn","transitionOut","closeOnToastrClick","toastSuccess","message","toastr","success","toastInfo","info","ADD_WORKFLOW","FILTER_WORKFLOW","DELETE_WORKFLOW","EDIT_WORKFLOW_STATUS","CHANGE_WORKFLOW_STATUS","EDIT_WORKFLOW_TITLE","SET_PENDING_WORKFLOW","ADD_FIRST_NODE","SET_CURRENT_NODE","SHUFFLE_NODE","DELETE_LAST_NODE","DELETE_NODE","ADD_NODE","SAVE_NODE","CHANGE_STATUS","EDIT_FLOW_TITLE","EDIT_NODE_TITLE","EDIT_NODE_CONTENT","CLEAR_SELECTED_NODE","Login","React","lazy","Workflow","Node","Header","App","fallback","exact","component","path","Boolean","window","location","hostname","match","NODE_STATUS","initialState","items","filterItems","nextStatus","status","workflow","state","action","type","actions","id","name","text","newState","filter","x","newfilterItemsState","item","toLocaleLowerCase","includes","transformWorkflow","map","task","transFormFlowTitle","flow","transSetPenfingWorkflow","seletedFlowId","NodeList","selectedNode","workFlowID","title","content","nodes","shuffle","array","sort","Math","random","flowId","workFlowName","filterSelectedNode","node","pop","length","JSON","parse","stringify","tansformNodeList","tansformNodeListCopy","transformNode","transformNodeListTitle","editNodeTitle","nodeId","editNodeContent","combineReducers","toastrReducer","persistConfig","key","storage","whitelist","pReducer","persistReducer","rootReducer","middleware","applyMiddleware","thunk","logger","store","createStore","persistStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.9e2b0d99.chunk.js","sourcesContent":["import React from 'react'\nimport ReduxToastr, { toastr } from 'react-redux-toastr'\n\nexport const Toastr = () => {\n    return <ReduxToastr\n        timeOut={4000}\n        newestOnTop={false}\n        preventDuplicates\n        position=\"bottom-right\"\n        transitionIn=\"fadeIn\"\n        transitionOut=\"fadeOut\"\n        closeOnToastrClick />\n}\n\nexport const toastSuccess = (message: string) => {\n    toastr.success(\"success\", message)\n}\n\nexport const toastInfo = (message: string) => {\n    toastr.info(\"Info\", message)\n}","\nexport const ADD_WORKFLOW = 'ADD_WORKFLOW'\nexport const FILTER_WORKFLOW = 'FILTER_WORKFLOW'\nexport const DELETE_WORKFLOW = 'DELETE_WORKFLOW'\nexport const EDIT_WORKFLOW_STATUS = 'EDIT_WORKFLOW_STATUS'\nexport const CHANGE_WORKFLOW_STATUS = 'CHANGE_WORKFLOW_STATUS'\nexport const EDIT_WORKFLOW_TITLE = 'EDIT_WORKFLOW_TITLE'\nexport const SET_PENDING_WORKFLOW = 'SET_PENDING_WORKFLOW'\n\nexport const ADD_FIRST_NODE = 'ADD_FIRST_NODE';\nexport const SET_CURRENT_NODE = 'SET_CURRENT_NODE';\nexport const SHUFFLE_NODE = 'SHUFFLE_NODE'\nexport const DELETE_LAST_NODE = 'DELETE_LAST_NODE'\nexport const DELETE_NODE = 'DELETE_NODE'\nexport const ADD_NODE = 'ADD_NODE'\nexport const SAVE_NODE = 'SAVE_NODE'\nexport const CHANGE_STATUS = 'CHANGE_STATUS'\nexport const EDIT_FLOW_TITLE = 'EDIT_FLOW_TITLE'\nexport const EDIT_NODE_TITLE = 'EDIT_NODE_TITLE'\nexport const EDIT_NODE_CONTENT = 'EDIT_NODE_CONTENT'\nexport const CLEAR_SELECTED_NODE = 'CLEAR_SELECTED_NODE';","import React, { Suspense } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nimport './App.css';\nimport { Toastr } from \"./components/Toaster\";\n\nconst Login = React.lazy(() => import('./components/Login'));\nconst Workflow = React.lazy(() => import('./container/workflow'));\nconst Node = React.lazy(() => import('./container/node'));\nconst Header = React.lazy(() => import('./components/Header'))\n\nfunction App() {\n  return (\n    <div >\n      <Suspense fallback={<div>...Loading</div>}>\n        <Toastr />\n        <Router>\n          <Header />\n          <Switch>\n            <Route exact component={Login} path=\"/\" />\n            <Route exact component={Workflow} path=\"/workflow\" />\n            <Route exact component={Node} path=\"/node/:id\" />\n          </Switch>\n        </Router>\n      </Suspense>\n    </div>\n  );\n}\n\n// const PrivateRoute = () => {\n\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { workFlowDetails } from \"../type\";\nimport * as actions from \"../action/actionsCreators\";\nexport const NODE_STATUS = ['COMPLETE', \"INPROGRESS\", \"PENDING\"]\n\nconst initialState = {\n    items: [],\n    filterItems: []\n}\n\nconst workflow = (state = initialState, action: any) => {\n    switch (action.type) {\n\n        case actions.ADD_WORKFLOW:\n            return {\n                ...state,\n                items: [...state.items, {\n                    id: action.id,\n                    name: `${action.text} ${action.id}`,\n                    status: 'PENDING'\n                }],\n                filterItems: [...state.items, {\n                    id: action.id,\n                    name: `${action.text} ${action.id}`,\n                    status: 'PENDING'\n                }]\n            }\n\n        case actions.DELETE_WORKFLOW:\n            const newState = state.items.filter((x: any) => x.id !== action.id)\n            const newfilterItemsState = state.filterItems.filter((x: any) => x.id !== action.id)\n            return { ...state, items: newState, filterItems: newfilterItemsState }\n\n        case actions.FILTER_WORKFLOW:\n            const filter = state.items.filter((item: workFlowDetails) =>\n                item.name.toLocaleLowerCase().includes(action.text.toLocaleLowerCase())\n            )\n            return { ...state, filterItems: filter };\n\n        case actions.CHANGE_WORKFLOW_STATUS:\n\n            let transformWorkflow = state.items.map((task: any) => (task.id === action.id) ? { ...task, status: nextStatus(task.status) } : task)\n            return { ...state, items: transformWorkflow, filterItems: transformWorkflow }\n\n        case actions.EDIT_WORKFLOW_TITLE:\n            const transFormFlowTitle = state.items.map((flow: any) => {\n                if (flow.id === action.id) {\n                    return {\n                        ...flow,\n                        name: action.text\n                    }\n                } else {\n                    return flow\n                }\n            })\n\n            return {\n                items: transFormFlowTitle,\n                filterItems: transFormFlowTitle\n            }\n\n        case actions.SET_PENDING_WORKFLOW:\n            let transSetPenfingWorkflow = state.items.map((task: any) => (task.id === action.seletedFlowId) ? { ...task, status: NODE_STATUS[2] } : task)\n            return { ...state, items: transSetPenfingWorkflow, filterItems: transSetPenfingWorkflow }\n\n        default:\n            return state\n    }\n}\n\nfunction nextStatus(status: string) {\n    switch (status) {\n        case NODE_STATUS[0]:\n            debugger\n            return NODE_STATUS[2]\n        case NODE_STATUS[2]:\n            debugger\n            return NODE_STATUS[0]\n    }\n}\n\nexport default workflow","import * as actions from \"../action/actionsCreators\";\nimport { NodeTaskT, nodeDetailsT } from \"../type\";\n\ninterface nodeREducer {\n    NodeList: Array<NodeTaskT>\n    selectedNode: NodeTaskT\n}\n\nconst initialState: nodeREducer = {\n    NodeList: [],\n    selectedNode: { workFlowID: 0, title: '', content: '', nodes: [] }\n}\n\nexport const NODE_STATUS = ['COMPLETE', \"INPROGRESS\", \"PENDING\"]\n\nconst Node = (state = initialState, action: any) => {\n    switch (action.type) {\n\n        case actions.ADD_FIRST_NODE:\n            return {\n                ...state,\n                NodeList: [...state.NodeList, {\n                    workFlowID: action.flowId,\n                    workFlowName: `Workflow ${action.flowId}`,\n                    nodes: [{\n                        name: `Node ${0}`,\n                        id: 0,\n                        status: 'PENDING'\n                    }]\n                }]\n            }\n\n        case actions.SET_CURRENT_NODE:\n            let filterSelectedNode = state.NodeList.filter(node => node.workFlowID === action.flowId).pop()\n            return { ...state, selectedNode: filterSelectedNode }\n\n        case actions.ADD_NODE:\n            return {\n                ...state,\n                selectedNode: {\n                    ...state.selectedNode,\n                    nodes: [...state.selectedNode.nodes, {\n                        id: state.selectedNode.nodes.length,\n                        name: `${action.text} ${state.selectedNode.nodes.length}`,\n                        status: 'PENDING'\n                    }]\n                }\n            }\n\n        case actions.SHUFFLE_NODE:\n            return {\n                ...state,\n                selectedNode: {\n                    ...state.selectedNode,\n                    nodes: JSON.parse(JSON.stringify(shuffle(state.selectedNode.nodes)))\n                }\n            }\n\n        case actions.DELETE_NODE:\n            const newState = state.NodeList.filter((x: any) => x.workFlowID !== action.id)\n            return { ...state, NodeList: newState }\n\n        case actions.DELETE_LAST_NODE:\n            if (state.selectedNode.nodes.length === 1) return state;\n            state.selectedNode.nodes.pop()\n            return {\n                ...state, selectedNode: {\n                    ...state.selectedNode,\n                    nodes: JSON.parse(JSON.stringify(shuffle(state.selectedNode.nodes)))\n                }\n            }\n\n        case actions.SAVE_NODE:\n            const tansformNodeList = state.NodeList.map(node => (node.workFlowID === state.selectedNode.workFlowID) ? state.selectedNode : node)\n            const tansformNodeListCopy = JSON.parse(JSON.stringify(tansformNodeList));\n            return { ...state, NodeList: tansformNodeListCopy }\n\n        case actions.CHANGE_STATUS:\n            const transformNode = state.selectedNode.nodes.map((node: any) =>\n                (action.id === node.id) ? {\n                    ...node, status: nextStatus(node.status)\n                } : node)\n            return { ...state, selectedNode: { ...state.selectedNode, nodes: transformNode } }\n\n        case actions.EDIT_FLOW_TITLE:\n            const transformNodeListTitle = state.NodeList.map((node: any) =>\n                (action.id === node.workFlowID) ? {\n                    ...node, workFlowName: action.text\n                } : node)\n            return { ...state, NodeList: transformNodeListTitle, selectedNode: { ...state.selectedNode, workFlowName: action.text } }\n\n        case actions.EDIT_NODE_TITLE:\n            const editNodeTitle = state.selectedNode.nodes.map((node: nodeDetailsT) => (node.id === action.nodeId) ? { ...node, name: action.title } : node)\n            return { ...state, selectedNode: { ...state.selectedNode, nodes: editNodeTitle } }\n\n        case actions.EDIT_NODE_CONTENT:\n            const editNodeContent = state.selectedNode.nodes.map((node: nodeDetailsT) => (node.id === action.nodeId) ? { ...node, content: action.content } : node)\n            return { ...state, selectedNode: { ...state.selectedNode, nodes: editNodeContent } }\n\n        case actions.CLEAR_SELECTED_NODE:\n            return { ...state, selectedNode: [] }\n\n        default:\n            return state\n    }\n}\n\nfunction shuffle(array: any) {\n    const randomArray = array.sort(() => Math.random() - 0.5);\n    return randomArray;\n}\n\nfunction nextStatus(status: string) {\n    switch (status) {\n        case NODE_STATUS[0]:\n            return NODE_STATUS[1]\n        case NODE_STATUS[1]:\n            return NODE_STATUS[2]\n        case NODE_STATUS[2]:\n            return NODE_STATUS[0]\n    }\n}\n\nexport default Node","import { combineReducers } from \"redux\";\nimport workflow from \"./workflow.reducer\";\nimport node from \"./node.reducer\";\nimport { reducer as toastrReducer } from 'react-redux-toastr';\n\nexport default combineReducers({\n    workflow,\n    node,\n    toastr: toastrReducer\n})","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport rootReducer from './index';\n\nconst persistConfig = {\n  key: 'flow',\n  storage: storage,\n  whitelist: ['node', 'workflow'] // which reducer want to store\n};\nconst pReducer = persistReducer(persistConfig, rootReducer);\nconst middleware = applyMiddleware(thunk, logger);\nconst store = createStore(pReducer, middleware);\nconst persistor = persistStore(store);\n\nexport { persistor, store };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from \"./reducer/configureStore\";\nimport 'react-redux-toastr/lib/css/react-redux-toastr.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}