{"version":3,"sources":["components/Card/index.tsx","action/node.action.tsx","components/Button/status/index.tsx","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","container/node.tsx"],"names":["Cards","items","children","className","map","item","index","key","id","nextNode","addFirstNode","workflowId","dispatch","type","action","flowId","toastSuccess","setCurrentNode","shuffleNode","toastInfo","deleteLastNode","addNode","text","saveNode","getState","seletedFlowName","node","selectedNode","workFlowName","seletedFlowId","workFlowID","changeNodeStatus","editFlowTitle","editNodeTitle","nodeId","title","editNodeContent","content","clearSelectedNode","Status","status","statusHandler","onClick","e","toLowerCase","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","NodeOperation","shuffle","deleteNode","save","flowTitle","useState","flowName","setFlowName","useEffect","onChange","target","taskHandler","NodeCard","name","handler","toggleStatus","editTitle","editContent","nodeName","setName","nodeContent","setContent","contentHandler","form","connect","state","nodes","actions","add","remove","history","selectedFlow","parseInt","location","pathname","split","currentFlow","task"],"mappings":"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","file":"static/js/4.423e6182.chunk.js","sourcesContent":["import React from \"react\";\nimport './style.css';\nimport { workFlowDetails } from \"../../type\";\n\nexport interface CardContent {\n    items: Array<workFlowDetails>\n    children: any\n}\n\nexport const Cards = ({ items, children }: CardContent) => {\n    return <>\n        <div className=\"flex-row m-16\">\n            {\n                items && items.map((item: workFlowDetails, index: any) => {\n                    return <div key={`${index}_item_${item.id}`} className=\"flex-column m-16 card p-16\">\n                        {\n                            children(item)\n                        }\n                    </div>\n                })\n            }\n        </div>\n    </>\n}\n\nexport default Cards;","import * as action from \"./actionsCreators\";\nimport { toastSuccess, toastInfo } from \"../components/Toaster\";\n\nexport let nextNode = 1\n\nexport const addFirstNode = (workflowId: number) => (dispatch: any) => {\n    dispatch({ type: action.ADD_FIRST_NODE, id: nextNode++, flowId: workflowId })\n    toastSuccess(`Workflow ${workflowId} added.`)\n}\n\nexport const setCurrentNode = (flowId: number) => (dispatch: any) => {\n    dispatch({ type: action.SET_CURRENT_NODE, flowId })\n}\n\nexport const shuffleNode = () => (dispatch: any) => {\n    dispatch({ type: action.SHUFFLE_NODE })\n    toastInfo(`Workflow Shuffle.`)\n}\n\nexport const deleteLastNode = () => (dispatch: any) => {\n    dispatch({ type: action.DELETE_LAST_NODE })\n    toastInfo(`Last Node Deleted.`)\n}\n\nexport const addNode = (text: string) => (dispatch: any) => {\n    dispatch({ type: action.ADD_NODE, id: nextNode++, text })\n    toastSuccess(`Node Added.`)\n}\n\nexport const saveNode = () => (dispatch: any, getState: any) => {\n    let seletedFlowName = getState().node.selectedNode.workFlowName\n    let seletedFlowId = getState().node.selectedNode.workFlowID\n\n    dispatch({ type: action.SAVE_NODE })\n    dispatch({ type: action.EDIT_WORKFLOW_TITLE, seletedFlowName, seletedFlowId })\n    toastSuccess(`Node Save.`)\n}\n\nexport const changeNodeStatus = (id: number) => (dispatch: any, getState: any) => {\n    let seletedFlowId = getState().node.selectedNode.workFlowID\n\n    dispatch({ type: action.CHANGE_STATUS, id })\n    dispatch({ type: action.SET_PENDING_WORKFLOW, seletedFlowId })\n}\n\nexport const editFlowTitle = (text: string) => (dispatch: any, getState: any) => {\n    let id = getState().node.selectedNode.workFlowID;\n    dispatch({ type: action.EDIT_FLOW_TITLE, text, id })\n    dispatch({ type: action.EDIT_WORKFLOW_TITLE, text, id });\n}\n\nexport const editNodeTitle = (nodeId: number, title: string) => (dispatch: any) => {\n    dispatch({ type: action.EDIT_NODE_TITLE, nodeId, title })\n}\n\nexport const editNodeContent = (nodeId: number, content: string) => (dispatch: any) => {\n    dispatch({ type: action.EDIT_NODE_CONTENT, nodeId, content })\n}\n\nexport const clearSelectedNode = () => (dispatch: any) => {\n    dispatch({\n        type: action.CLEAR_SELECTED_NODE\n    })\n}\n","import React from \"react\";\nimport './style.css';\n\nconst Status = ({ status, statusHandler }: any) => {\n    return <>\n        <div onClick={(e) => statusHandler(e)} id=\"tickcontainer\">\n            <div className={`tickbg ${status.toLowerCase()}`}>\n                <div className=\"tick\">\n                </div>\n            </div>\n        </div>\n    </>\n}\n\nexport default Status;","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport './style.css';\nimport { Cards } from \"../components/Card\";\nimport * as actions from \"../action/node.action\";\nimport { workFlowDetails } from \"../type\";\nimport StatusBtn from \"../components/Button/status\";\n\ninterface NodeT {\n    shuffle: () => void\n    remove: () => void\n    add: () => void\n    setCurrentNode: (id: number) => void\n    save: () => void\n    toggleStatus: (id: number) => void\n    editContent: (id: number, text: string) => void\n    editTitle: (id: number, text: string) => void\n    editFlowTitle: (flowName: any) => void\n    clearSelectedNode: () => void\n    selectedNode: any\n    history: any\n    workFlowName: string\n}\n\nconst Node = ({ shuffle,\n    remove,\n    add,\n    save,\n    selectedNode,\n    toggleStatus,\n    editContent,\n    editTitle,\n    setCurrentNode,\n    history,\n    workFlowName,\n    editFlowTitle,\n    clearSelectedNode\n}: NodeT) => {\n\n    useEffect(() => {\n        let selectedFlow = parseInt(history.location.pathname.split('/')[2]);\n        setCurrentNode(selectedFlow)\n\n        return () => {\n            clearSelectedNode()\n        }\n    }, [])\n\n    return <div>\n        {(workFlowName === \"\" || workFlowName) && <NodeOperation\n            shuffle={shuffle}\n            deleteNode={() => remove()}\n            addNode={() => add()}\n            save={save}\n            editFlowTitle={(currentFlow: any) => editFlowTitle(currentFlow)}\n            flowTitle={workFlowName}\n        />}\n        {selectedNode && <Cards\n            items={selectedNode}\n        >\n            {(task: any) => {\n                return <NodeCard\n                    item={task}\n                    handler={{\n                        toggleStatus: (id: number) => toggleStatus(id),\n                        editTitle: (id: number, text: string) => editTitle(id, text),\n                        editContent: (id: number, text: string) => editContent(id, text)\n                    }} />\n            }}\n        </Cards>}\n        <div className=\"flex-center\" >Note: Please save before leaving this page.</div>\n    </div>\n}\n\ninterface cardP {\n    item: workFlowDetails\n    handler: any\n}\n\n\nconst NodeOperation = ({ shuffle, deleteNode, addNode, save, flowTitle, editFlowTitle }: any) => {\n\n    const [flowName, setFlowName] = useState(flowTitle)\n\n    useEffect(() => {\n        setFlowName(flowName)\n    })\n\n    const taskHandler = (e: any) => {\n        setFlowName(e.target.value);\n        editFlowTitle(e.target.value)\n    }\n\n    return <>\n        <div className=\"flex-row flow-operation flex-space-between\">\n            <div> <input onChange={(e: any) => taskHandler(e)} className=\"workflow-name m-l-32 \" value={flowName} /> </div>\n            <div className=\"m-r-32\">\n                <button className=\"btn shuffle-btn rounded-btn m-r-8 m-l-8\" onClick={() => shuffle()}>Shuffle</button>\n                <button className=\"btn danger-btn rounded-btn m-r-8 m-l-8\" onClick={() => deleteNode()}>Delete</button>\n                <button className=\"btn create-btn rounded-btn m-r-8 m-l-8\" onClick={() => addNode()}>Add Note</button>\n                <button className=\"btn save-btn rounded-btn m-r-8 m-l-8\" onClick={() => save()}>Save</button>\n            </div>\n        </div>\n    </>\n}\n\nconst NodeCard = ({ item: { name, status, content, id }, handler: { toggleStatus, editTitle, editContent } }: cardP) => {\n\n    const [nodeName, setName] = useState(name)\n    const [nodeContent, setContent] = useState(content)\n\n    const taskHandler = (e: any) => {\n        setName(e.target.value);\n        editTitle(id, e.target.value)\n    }\n\n    const contentHandler = (e: any) => {\n        setContent(e.target.value);\n        editContent(id, e.target.value)\n    }\n\n    return <>\n        <div className=\"card-node\">\n            <div className=\"right-top\">\n                <StatusBtn\n                    statusHandler={(e: any) => {\n                        toggleStatus(id);\n                    }}\n                    status={status} />\n            </div>\n            <div className=\"flex-column\">\n                <div className=\"m-b-8\">\n                    <input className=\"title-box \" onChange={(e) => taskHandler(e)} value={nodeName} />\n                </div>\n                <div className=\"m-t-8\">\n                    <textarea\n                        className=\"content-box\"\n                        value={nodeContent}\n                        onChange={(e: any) => contentHandler(e)}\n                        name=\"comment\"\n                        form=\"usrform\">\n                    </textarea>\n                </div>\n            </div>\n        </div>\n    </>\n}\n\nconst mapStateToProps = (state: any) => {\n    return {\n        selectedNode: state.node.selectedNode.nodes,\n        workFlowName: state.node.selectedNode.workFlowName\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => ({\n    setCurrentNode: (id: number) => dispatch(actions.setCurrentNode(id)),\n    add: () => dispatch(actions.addNode(\"Node\")),\n    shuffle: () => dispatch(actions.shuffleNode()),\n    remove: () => dispatch(actions.deleteLastNode()),\n    save: () => dispatch(actions.saveNode()),\n    toggleStatus: (id: number) => dispatch(actions.changeNodeStatus(id)),\n    editFlowTitle: (text: string) => dispatch(actions.editFlowTitle(text)),\n    clearSelectedNode: () => dispatch(actions.clearSelectedNode()),\n    editContent: (id: number, text: string) => dispatch(actions.editNodeContent(id, text)),\n    editTitle: (id: number, text: string) => dispatch(actions.editNodeTitle(id, text)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Node)"],"sourceRoot":""}