{"version":3,"sources":["App.tsx","serviceWorker.ts","reducer/workflow.reducer.tsx","reducer/node.reducer.tsx","reducer/index.tsx","index.tsx","action/node.action.tsx"],"names":["Login","React","lazy","Workflow","Node","App","fallback","component","path","Boolean","window","location","hostname","match","initialState","items","workflow","state","action","type","Object","assign","id","name","text","status","newState","filter","x","SHUFFLE_NODE","completed","DELETE_NODE","ADD_NOTE","SAVE_NODE","CHANGE_STATUS","EDIT_NODE_TITLE","EDIT_NODE_CONTENT","combineReducers","node","store","createStore","rootReducer","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","shuffleNode","deleteNode","addNote","saveNode","changeNodeStatus","editNodeTitle","editNodeContent"],"mappings":"sRASMA,G,MAAQC,IAAMC,MAAK,kBAAM,iCACzBC,EAAWF,IAAMC,MAAK,kBAAM,gCAC5BE,EAAOH,IAAMC,MAAK,kBAAM,gCAkB9B,IAIeG,EApBf,WACE,OACE,6BACE,kBAAC,WAAD,CAAUC,SAAU,4CAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,UAAWP,EAAOQ,KAAK,WAC9B,kBAAC,IAAD,CAAOD,UAAWJ,EAAUK,KAAK,cACjC,kBAAC,IAAD,CAAOD,UAAWH,EAAMI,KAAK,mBCTrBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCjBAC,EAAe,CACjBC,MAAO,IAyBIC,EAtBE,WAAwC,IAAvCC,EAAsC,uDAA9BH,EAAcI,EAAgB,uCACpD,OAAQA,EAAOC,MAEX,IAAK,eACD,OAAOC,OAAOC,OACV,GAAIJ,EAAO,CACXF,MAAM,GAAD,mBAAME,EAAMF,OAAZ,CAAmB,CACpBO,GAAIJ,EAAOI,GACXC,KAAK,GAAD,OAAKL,EAAOM,KAAZ,YAAoBN,EAAOI,IAC/BG,QAAQ,OAIpB,IAAK,kBACD,IAAMC,EAAWT,EAAMF,MAAMY,QAAO,SAACC,GAAD,OAAYA,EAAEN,KAAOJ,EAAOI,MAChE,OAAOF,OAAOC,OAAO,GAAIJ,EAAO,CAAEF,MAAOW,IAE7C,QACI,OAAOT,I,OCQJb,EA5BF,WAA8B,IAA7Ba,EAA4B,uDAApB,GAAIC,EAAgB,uCACtC,OAAQA,EAAOC,MACX,KAAKU,IACD,MAAM,GAAN,mBACOZ,GADP,CAEI,CACIK,GAAIJ,EAAOI,GACXC,KAAML,EAAOM,KACbM,WAAW,KAGvB,KAAKC,IAEL,KAAKC,IAEL,KAAKC,IAEL,KAAKC,IAEL,KAAKC,IAEL,KAAKC,IACD,OACJ,QACI,OAAOnB,ICvBJoB,cAAgB,CAC3BrB,WACAsB,SCGEC,EAAQC,YAAYC,GAE1BC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,QAGJM,SAASC,eAAe,SJ0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,+BK/I5B,4dAAO,IAAM3B,EAAe,eACf4B,EAAc,iBAAO,CAAEtC,KAAMU,IAE7BE,EAAc,cACd2B,EAAa,iBAAO,CAAEvC,KAAMY,IAE5BC,EAAW,WACX2B,EAAU,iBAAO,CAAExC,KAAMa,IAEzBC,EAAY,YACZ2B,EAAW,SAACtC,GAAD,MAAiB,CACrCH,KAAMc,EACNX,OAGSY,EAAgB,YAChB2B,EAAmB,iBAAO,CACnC1C,KAAMe,IAOGC,EAAkB,kBAClB2B,EAAgB,iBAAO,CAChC3C,KAAMgB,IAGGC,EAAoB,oBACpB2B,EAAkB,SAAC,GAAD,EAAGzC,GAAH,EAAOE,KAAP,MAA8B,CACzDL,KAAMiB,M","file":"static/js/main.879c3c75.chunk.js","sourcesContent":["import React, { Suspense } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nimport './App.css';\n\nconst Login = React.lazy(() => import('./components/Login'));\nconst Workflow = React.lazy(() => import('./container/workflow'));\nconst Node = React.lazy(() => import('./container/node'));\n\nfunction App() {\n  return (\n    <div >\n      <Suspense fallback={<div>...Loading</div>}>\n        <Router>\n          <Switch>\n            <Route component={Login} path=\"/login\" />\n            <Route component={Workflow} path=\"/workflow\" />\n            <Route component={Node} path=\"/node/:id\" />\n          </Switch>\n        </Router>\n      </Suspense>\n    </div>\n  );\n}\n\nconst PrivateRoute = () => {\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nconst initialState = {\n    items: []\n}\n\nconst workflow = (state = initialState, action: any) => {\n    switch (action.type) {\n\n        case 'ADD_WORKFLOW':\n            return Object.assign(\n                {}, state, {\n                items: [...state.items, {\n                    id: action.id,\n                    name: `${action.text} ${action.id}`,\n                    status: false\n                }]\n            })\n\n        case 'DELETE_WORKFLOW':\n            const newState = state.items.filter((x: any) => x.id !== action.id)\n            return Object.assign({}, state, { items: newState })\n\n        default:\n            return state\n    }\n}\n\nexport default workflow","import { SHUFFLE_NODE, DELETE_NODE, ADD_NOTE, SAVE_NODE, CHANGE_STATUS, EDIT_NODE_CONTENT, EDIT_NODE_TITLE } from \"../action/node.action\";\n\n\nconst Node = (state = [], action: any) => {\n    switch (action.type) {\n        case SHUFFLE_NODE:\n            return [\n                ...state,\n                {\n                    id: action.id,\n                    name: action.text,\n                    completed: false\n                }\n            ]\n        case DELETE_NODE:\n            return\n        case ADD_NOTE:\n            return\n        case SAVE_NODE:\n            return\n        case CHANGE_STATUS:\n            return\n        case EDIT_NODE_TITLE:\n            return\n        case EDIT_NODE_CONTENT:\n            return\n        default:\n            return state\n    }\n}\n\nexport default Node","import { combineReducers } from \"redux\";\nimport workflow from \"./workflow.reducer\";\nimport node from \"./node.reducer\";\n\nexport default combineReducers({\n    workflow,\n    node\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport rootReducer from \"./reducer\";\n\nconst store = createStore(rootReducer)\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\n\nexport const SHUFFLE_NODE = 'SHUFFLE_NODE'\nexport const shuffleNode = () => ({ type: SHUFFLE_NODE })\n\nexport const DELETE_NODE = 'DELETE_NODE'\nexport const deleteNode = () => ({ type: DELETE_NODE })\n\nexport const ADD_NOTE = 'ADD_NOTE'\nexport const addNote = () => ({ type: ADD_NOTE })\n\nexport const SAVE_NODE = 'SAVE_NODE'\nexport const saveNode = (id: number) => ({\n    type: SAVE_NODE,\n    id\n})\n\nexport const CHANGE_STATUS = 'SAVE_NODE'\nexport const changeNodeStatus = () => ({\n    type: CHANGE_STATUS\n})\n\nexport interface NodeTextT {\n    id: string\n    text: string\n}\nexport const EDIT_NODE_TITLE = 'EDIT_NODE_TITLE'\nexport const editNodeTitle = () => ({\n    type: EDIT_NODE_TITLE\n})\n\nexport const EDIT_NODE_CONTENT = 'EDIT_NODE_CONTENT'\nexport const editNodeContent = ({ id, text }: NodeTextT) => ({\n    type: EDIT_NODE_CONTENT\n})"],"sourceRoot":""}